{"version":3,"sources":["store/ToDo.ts","components/ToDoItem/ToDoItem.tsx","components/ToDoList/ToDoList.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx","components/App/App.module.css"],"names":["toDoList","Error","makeAutoObservable","this","item","find","el","title","setError","undefined","push","localStorage","setItem","JSON","stringify","console","log","filter","val","index","indexOf","completed","clear","items","text","error","fetch","Math","floor","random","then","response","json","addToDoItem","catch","e","ToDoItem","observer","element","closable","onClose","ToDo","removeToDoItem","style","marginRight","checked","onChange","togleDone","ToDoList","useState","formData","setFormData","useEffect","inputSavedText","parse","getItem","length","color","marginBottom","fontSize","name","initialValues","remember","onFinish","autoComplete","Item","rules","required","message","placeholder","target","value","autoFocus","type","htmlType","onClick","reset","fetchRandomToDoItem","map","App","getToDoList","addAllList","className","styles","AppHeader","AppHead","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a2a052f1.chunk.js","sourcesContent":["import { makeAutoObservable} from \"mobx\";\nimport { IToDoItem } from \"../types\";\nclass ToDo {\n    toDoList: IToDoItem[] = [];\n    Error: string = '';\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    addToDoItem(item: IToDoItem): void {\n        if (this.toDoList.find(el => el.title === item.title)) {\n            this.setError('A similar task already exists.');\n        } else if (item.title === '' || item.title === undefined) {\n            this.setError('Cannot be empty.');\n        } else {\n            this.toDoList.push(item);\n            localStorage.setItem('toDoList', JSON.stringify(this.toDoList));\n            console.log('addToDoItem:', item);\n        }\n    }\n\n    removeToDoItem(item: IToDoItem): void {\n        this.toDoList = this.toDoList.filter(val => val !== item);\n        localStorage.setItem('toDoList', JSON.stringify(this.toDoList));\n        console.log('removeToDoItem:', item);\n    }\n\n    togleDone(item: IToDoItem): void {\n        const index = this.toDoList.indexOf(item);\n        this.toDoList[index].completed = !this.toDoList[index].completed;\n        localStorage.setItem('toDoList', JSON.stringify(this.toDoList));\n        console.log('togleDone:', item);\n    }\n\n    reset(): void {\n        this.toDoList = [];\n        localStorage.clear();\n        console.log('reset');\n    }\n\n    addAllList(items: IToDoItem[]): void {\n        this.toDoList = items;\n        console.log('addAllList:', items);\n    }\n\n    setError(text: string, error?: string): void {\n        this.Error = text;\n        console.log('setError:', text);\n        if (error) {\n            console.log(error);\n        }\n    }\n\n    fetchRandomToDoItem(): void {\n        fetch(`https://jsonplaceholder.typicode.com/todos/${Math.floor(Math.random() * 200)}`)\n            .then(response => response.json())\n            .then(json => this.addToDoItem(json))\n            .catch(e => this.setError('Something went wrong. Try again.', e));\n    }\n}\n\nexport default new ToDo();","import { Checkbox, Tag } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport ToDo from \"../../store/ToDo\";\nimport { IToDoItem } from \"../../types\";\n\nconst ToDoItem = observer(({ element }: { element: IToDoItem }): JSX.Element => {\n    const onClose = (): void => {\n        ToDo.removeToDoItem(element);\n    };\n\n    const onChange = (): void => {\n        ToDo.togleDone(element);\n    }\n\n    return (\n        <Tag closable onClose={onClose}>\n            <Checkbox style={{ marginRight: '10px' }} checked={element.completed} onChange={onChange} />\n\n            <span style={{ marginRight: '10px' }}>\n                {element.title}\n            </span>\n        </Tag>\n    );\n})\n\nexport default ToDoItem;","import { Input, Button, Form } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport ToDo from '../../store/ToDo'\nimport ToDoItem from \"../ToDoItem/ToDoItem\";\nimport { IToDoItem } from \"../../types\";\n\nconst ToDoList = observer((): JSX.Element => {\n    const [formData, setFormData] = useState<IToDoItem>({} as IToDoItem);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setFormData({ title: e.target.value, completed: false });\n        localStorage.setItem('toDoListInput', JSON.stringify({ title: e.target.value, completed: false }));\n        ToDo.setError('');\n    };\n\n    const onFinish = (): void => {\n        ToDo.addToDoItem(formData);\n        setFormData({ title: '', completed: false });\n        localStorage.setItem('toDoListInput', '');\n    };\n\n    const onReset = (): void => {\n        ToDo.reset();\n    };\n\n    const onFetch = (): void => {\n        ToDo.fetchRandomToDoItem();\n    };\n\n    useEffect(() => {\n        const inputSavedText = JSON.parse(localStorage.getItem('toDoListInput') || '[]');\n        setFormData(inputSavedText);\n    }, [])\n\n    return (\n        <>\n            <p>Total in list: {ToDo.toDoList.length}</p>\n\n            {ToDo.Error ? <div style={{ color: 'tomato', marginBottom: '24px', fontSize: '2vmin' }}>{ToDo.Error}</div> : null}\n\n            <Form\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                autoComplete=\"off\"\n            >\n                <Form.Item rules={[{ required: true, message: 'Please input your username!' }]}>\n                    <Input placeholder=\"What do you want to do?\" onChange={onChange} value={formData.title} autoFocus />\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: '8px' }}>\n                        Add\n                    </Button>\n                    <Button htmlType=\"button\" onClick={onReset} style={{ marginRight: '8px' }}>\n                        Reset\n                    </Button>\n                    <Button type=\"link\" htmlType=\"button\" onClick={onFetch}>\n                        Fetch\n                    </Button>\n                </Form.Item>\n            </Form>\n\n            <div>\n                {ToDo.toDoList.map((item) => {\n                    return (\n                        <ToDoItem key={item.title} element={item} />\n                    )\n                })}\n            </div>\n        </>\n    );\n});\n\nexport default ToDoList;","import { useEffect } from 'react';\nimport styles from './App.module.css';\nimport ToDoList from '../ToDoList/ToDoList';\nimport ToDo from '../../store/ToDo';\n\nconst App = (): JSX.Element => {\n  useEffect(() => {\n    const getToDoList = JSON.parse(localStorage.getItem('toDoList') || '[]');\n    ToDo.addAllList(getToDoList);\n  }, [])\n\n  return (\n    <div className={styles.App}>\n      <header className={styles.AppHeader}>\n        <h1 className={styles.AppHead}>To-Do List</h1>\n        <ToDoList />\n      </header>\n    </div>\n  )\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__aOmNj\",\"AppHeader\":\"App_AppHeader__1RQkw\",\"AppHead\":\"App_AppHead__dArqm\"};"],"sourceRoot":""}